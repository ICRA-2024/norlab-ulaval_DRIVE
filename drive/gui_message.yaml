gui_message:
  metadata_form:
    status_message: "Metadata Form GUY"
    operator_action_message: "Fill the form in the tab named 'Metadata_form' and click on the button 'send_metadata_form'. \n 1.terrain= terrain name in english. \n 2. robot= warthog \n 3. traction_geometry ='wheels' or 'tracks'. \n 4. weather= 'the current weather', 'NA' if inside. \n 5. experiment_description = Goal and what is tested., \n 6.only_execute_trajectories = True if you are not executing a drive but testing a trajectory from a drive, 'false' if you are doing a drive. \n 7. 'absolute_path_to_experiment_folder' = the absoluth path to the experiment folder you are taking the trained parameters from. \n 8. Tire pressure = the tire pressure measured."
  mapping:
    status_message: "Creation of the map"
    operator_action_message: "1. Drive slowly (0.3 m/s) the robot along the perimeter of the space available to realise the Protocole drive. \n 2. Drive the robot in the center of the space available. \n 3. click on the 'Mapping finished' button."
  drive_ready:
    status_message: "Execution of random command"
    operator_action_message: "Press (the deadman switch) and the characterization trigger to start drive, usually 1 and (â–³). \n *** To stop the robot: \n   1. Press the human controll deamanswitch (the joystick) or release the 1 button. \n   2. Drive the robot in a position and orientation so that it can complete the stopped command. \n   3. Press the autonomous driving deadmanswitch and then characterization trigger to resume drive."
  drive_save:
    status_message: "Saving data acquired by drive"
    operator_action_message: "Press service call to save data, and start traning"
  model_training:
    status_message: "Training of the motion model"  
    operator_action_message: "Fill the train all motion model service call. \n 1. motion_model needs to be equal to 'all' \n 2. number_of_seconds_2_train_on: You needs to specify the number of second you want to use for the training. The code round it by 6 seconds. The number of seconds needs to be between 12s and 6*nbr_of_steps_done. \n 3. Click on the button to train the model. \n repeat theses steps for all the number of seconds you wanted."
  load_trajectory:
    status_message: "Loading of the trajectory in the map."  
    operator_action_message: "1. Drive and oriente the robot in the center of the space \n   2. Click on the 'Load trajejctory button' in the second tab ('repeat_traj') of the right column in foxglove. \n   3. Verify if the eight trajectory has been correctly load in the map.   \n 4. If the trajectory is not all on the same ground or hurting object repeat the step 2 and 3."
  load_controller:
    status_message: "Select your controller"
    operator_action_message: "1. Copy and paste one of the controller available in the parameters. You can identify them by the /drive/controller_available/X_steps_of_6.0s/_name_of_the_controller_ \n 2.click on te load controller associated to the path. \n 3. Verify that the ros2 parameters /controller_node/controller/ param has changed consequently. \n 4. Write the maximum angular and maximum linear speed you want the robot to go at. \n click on the button 'confirmed the maximum angular speed'. \n 4. Click on the 'execute the trajectory button' to realise the parameters.  "
  play_traj:
    status_message: "Executing a trajectory"
    operator_action_message: "If the robot is going wild, use the estop."
